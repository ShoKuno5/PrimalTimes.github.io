---
import Layout from '../layouts/Layout.astro';
import PostLayout from '../layouts/PostLayout.astro';
import PostLayoutWithCitations from '../layouts/PostLayoutWithCitations.astro';
import { getCollection } from 'astro:content';
import { getGitDatesForContent } from '../utils/gitDates';
import { extractDateFromFilename } from '../utils/extractDateFromFilename';

const posts = await getCollection('posts', ({ id }) => id.startsWith('en/') || !id.includes('/'));
const visiblePosts = posts.filter(post => !post.data.hidden);

// Sort posts with proper date priority
const sortedPosts = visiblePosts.sort((a, b) => {
  const aFilenameDate = extractDateFromFilename(a.slug);
  const bFilenameDate = extractDateFromFilename(b.slug);
  const aDate = a.data.date || aFilenameDate || getGitDatesForContent('posts', a.slug)?.created || new Date(0);
  const bDate = b.data.date || bFilenameDate || getGitDatesForContent('posts', b.slug)?.created || new Date(0);
  return bDate.getTime() - aDate.getTime();
});
---

<Layout title="Sho Kuno" description="Personal blog about technology, research, and thoughts">
  <div style="display: flex; flex-direction: column; gap: 4rem; margin-top: 90px;">
    {sortedPosts.map(async (post) => {
      const { Content } = await post.render();
      const gitDates = getGitDatesForContent('posts', post.slug);
      const filenameDate = extractDateFromFilename(post.slug);
      const publishDate = post.data.date || filenameDate || gitDates?.created;
      
      // For modified date, always use git modified if it exists and is different
      let modifiedDate = post.data.modified;
      if (!modifiedDate && gitDates?.modified && publishDate) {
        if (gitDates.modified.getTime() !== publishDate.getTime()) {
          modifiedDate = gitDates.modified;
        }
      }
      
      // Determine if we should use citations layout (check raw markdown)
      const contentHasCitations = post.body.includes('cite{') || post.body.includes('\\cite{');
      const useCitationsLayout = contentHasCitations || post.data.layout?.includes('PostLayoutWithCitations');
      const LayoutComponent = useCitationsLayout ? PostLayoutWithCitations : PostLayout;
      
      return (
        <div style="border-bottom: 1px solid rgba(0, 0, 0, 0.06); padding-bottom: 3rem;">
          <LayoutComponent
            title={post.data.title}
            date={publishDate}
            modified={modifiedDate}
            tags={post.data.tags}
            description={post.data.description || post.data.summary}
            content={post.body}
            mode="homepage"
            slug={post.slug.startsWith('en/') ? post.slug.slice(3) : post.slug}
            showMeta={true}
            showComments={false}
          >
            <Content />
          </LayoutComponent>
        </div>
      );
    })}
  </div>
</Layout>

<!-- Global Homepage Progress Script -->
<script is:inline>
(function() {
  'use strict';
  
  function updateHomepageProgress() {
    const articles = document.querySelectorAll('article');
    if (articles.length === 0) return;
    
    const windowHeight = window.innerHeight;
    const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
    
    articles.forEach((article, articleIndex) => {
      const headings = article.querySelectorAll('.sophisticated-markdown h2');
      if (headings.length === 0) return;
      
      // Calculate progress through this specific article
      const articleRect = article.getBoundingClientRect();
      const articleTop = articleRect.top + scrollTop;
      const articleHeight = articleRect.height;
      const articleBottom = articleTop + articleHeight;
      
      // Calculate how much of this article has been read
      let articleProgress = 0;
      
      if (articleRect.bottom < 0) {
        // Article is completely above viewport - 100% read
        articleProgress = 100;
      } else if (articleRect.top > windowHeight) {
        // Article is completely below viewport - 0% read
        articleProgress = 0;
      } else {
        // Article is at least partially visible
        const viewportTop = scrollTop;
        const scrolledPastArticle = Math.max(0, viewportTop - articleTop);
        articleProgress = Math.min((scrolledPastArticle / articleHeight) * 100, 100);
      }
      
      const viewportMiddle = scrollTop + windowHeight / 2;
      
      // Find which section we're currently reading in this article
      let currentSectionIndex = -1;
      
      for (let i = 0; i < headings.length; i++) {
        const heading = headings[i];
        const headingTop = heading.offsetTop;
        const nextHeading = headings[i + 1];
        const nextHeadingTop = nextHeading ? nextHeading.offsetTop : articleBottom;
        
        // Check if we're currently in this section
        if (viewportMiddle >= headingTop && viewportMiddle < nextHeadingTop) {
          currentSectionIndex = i;
          break;
        }
      }
      
      // Store the maximum progress reached for each section
      if (!window.sectionMaxProgress) {
        window.sectionMaxProgress = {};
      }
      
      // Create unique keys for each article's sections
      const articleId = `homepage-article-${articleIndex}`;
      
      // Update current section's max progress
      if (currentSectionIndex >= 0) {
        const sectionKey = `${articleId}-section-${currentSectionIndex}`;
        
        // Store the highest progress reached for this section
        if (!window.sectionMaxProgress[sectionKey] || articleProgress > window.sectionMaxProgress[sectionKey]) {
          window.sectionMaxProgress[sectionKey] = articleProgress;
        }
      }
      
      // Update all headings based on their actual reading progress
      headings.forEach((heading, index) => {
        const sectionKey = `${articleId}-section-${index}`;
        
        if (index < currentSectionIndex) {
          // Past sections - show the maximum progress actually achieved in that section
          const maxProgressInSection = window.sectionMaxProgress[sectionKey] || 3;
          let progressWidth;
          if (maxProgressInSection <= 3) {
            progressWidth = '3rem';
          } else {
            progressWidth = `${Math.min(maxProgressInSection, 100)}%`;
          }
          heading.style.setProperty('--progress-width', progressWidth);
        } else if (index === currentSectionIndex) {
          // Current section - show live article progress
          let progressWidth;
          if (articleProgress <= 3) {
            progressWidth = '3rem';
          } else {
            progressWidth = `${Math.min(articleProgress, 100)}%`;
          }
          heading.style.setProperty('--progress-width', progressWidth);
        } else {
          // Future sections - check if they're visible on screen
          const headingRect = heading.getBoundingClientRect();
          const isVisible = headingRect.top < windowHeight && headingRect.bottom > 0;
          
          if (isVisible) {
            // Section is visible - show current article progress
            let progressWidth;
            if (articleProgress <= 3) {
              progressWidth = '3rem';
            } else {
              progressWidth = `${Math.min(articleProgress, 100)}%`;
            }
            heading.style.setProperty('--progress-width', progressWidth);
          } else {
            // Section is not visible - keep at default
            heading.style.setProperty('--progress-width', '3rem');
          }
        }
      });
    });
  }
  
  // Throttle scroll events for performance
  let ticking = false;
  function handleScroll() {
    if (!ticking) {
      requestAnimationFrame(function() {
        updateHomepageProgress();
        ticking = false;
      });
      ticking = true;
    }
  }
  
  // Handle touch events for mobile
  function handleTouch() {
    setTimeout(updateHomepageProgress, 50);
  }
  
  // Initialize when DOM is ready
  function init() {
    updateHomepageProgress(); // Initial calculation
    
    // Add scroll listeners
    window.addEventListener('scroll', handleScroll, { passive: true });
    
    // Add touch listeners for mobile
    window.addEventListener('touchmove', handleTouch, { passive: true });
    window.addEventListener('touchend', handleTouch, { passive: true });
    
    // Recalculate on resize (orientation change)
    window.addEventListener('resize', function() {
      setTimeout(updateHomepageProgress, 100);
    }, { passive: true });
  }
  
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', init);
  } else {
    init();
  }
})();
</script>

<style is:global>
  /* Gradient title link effects - preserve gradient across all states */
  .gradient-title-link,
  .gradient-title-link:visited,
  .gradient-title-link:hover,
  .gradient-title-link:focus,
  .gradient-title-link:active {
    background: linear-gradient(135deg, #1f2937, #4b5563, #0066cc) !important;
    -webkit-background-clip: text !important;
    background-clip: text !important;
    color: transparent !important;
    outline: none;
  }
  
  .gradient-title-link:hover {
    background: linear-gradient(135deg, #374151, #6b7280, #2563eb) !important;
    -webkit-background-clip: text !important;
    background-clip: text !important;
    color: transparent !important;
    transform: translateY(-1px);
  }
  
  .gradient-title-link:active {
    background: linear-gradient(135deg, #111827, #374151, #1d4ed8) !important;
    -webkit-background-clip: text !important;
    background-clip: text !important;
    color: transparent !important;
    transform: translateY(0);
  }

  /* Tag hover effects to match PostLayout */
  .tag-link:hover {
    background: linear-gradient(135deg, #e2e8f0, #cbd5e1) !important;
    transform: translateY(-1px) !important;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1) !important;
    color: #334155 !important;
  }
  
  /* Enhanced markdown styling for sophisticated typography */
  .sophisticated-markdown {
    font-family: 'Inter', 'Noto Sans JP', -apple-system, BlinkMacSystemFont, system-ui, sans-serif;
    font-size: 1.125rem;
    line-height: 1.8;
    color: #374151;
    letter-spacing: -0.011em;
  }
  
  /* Typography Hierarchy */
  .sophisticated-markdown h1 {
    font-size: 2.25rem;
    font-weight: 800;
    line-height: 1.2;
    letter-spacing: -0.025em;
    margin: 3rem 0 1.5rem 0;
    color: #111827;
    background: linear-gradient(135deg, #111827, #374151);
    -webkit-background-clip: text;
    background-clip: text;
    color: transparent;
  }
  
  .sophisticated-markdown h2 {
    font-size: 1.875rem;
    font-weight: 700;
    line-height: 1.3;
    letter-spacing: -0.025em;
    margin: 2.5rem 0 1.25rem 0;
    color: #1f2937;
    padding-bottom: 0.75rem;
    border-bottom: 2px solid #e5e7eb;
    position: relative;
  }
  
  .sophisticated-markdown h2::after {
    content: '';
    position: absolute;
    bottom: -2px;
    left: 0;
    width: var(--progress-width, 3rem);
    height: 2px;
    background: linear-gradient(135deg, #0066cc, #8b5cf6);
    border-radius: 1px;
    transition: width 0.3s ease-out;
    max-width: 100%;
  }
  
  .sophisticated-markdown h3 {
    font-size: 1.5rem;
    font-weight: 600;
    line-height: 1.4;
    letter-spacing: -0.025em;
    margin: 2rem 0 1rem 0;
    color: #374151;
    position: relative;
    padding-left: 1rem;
  }
  
  .sophisticated-markdown h3::before {
    content: '';
    position: absolute;
    left: 0;
    top: 0.25rem;
    width: 4px;
    height: 1.5rem;
    background: linear-gradient(135deg, #0066cc, #8b5cf6);
    border-radius: 2px;
  }
  
  .sophisticated-markdown h4 {
    font-size: 1.25rem;
    font-weight: 600;
    line-height: 1.5;
    margin: 1.75rem 0 0.75rem 0;
    color: #4b5563;
  }
  
  .sophisticated-markdown h5,
  .sophisticated-markdown h6 {
    font-size: 1.125rem;
    font-weight: 600;
    line-height: 1.5;
    margin: 1.5rem 0 0.5rem 0;
    color: #6b7280;
  }
  
  /* Paragraphs and text */
  .sophisticated-markdown p {
    margin: 1.5rem 0;
    text-align: justify;
    hyphens: auto;
    -webkit-hyphens: auto;
    -moz-hyphens: auto;
  }
  
  .sophisticated-markdown p:first-of-type {
    font-size: 1.2rem;
    line-height: 1.7;
    color: #1f2937;
    font-weight: 400;
  }
  
  /* Links */
  .sophisticated-markdown a {
    color: #0066cc;
    text-decoration: none;
    font-weight: 500;
    border-bottom: 1px solid transparent;
    transition: all 0.2s ease;
    position: relative;
  }
  
  .sophisticated-markdown a:hover {
    color: #0052a3;
    border-bottom-color: #0066cc;
  }
  
  /* Lists */
  .sophisticated-markdown ul,
  .sophisticated-markdown ol {
    margin: 1.5rem 0;
    padding-left: 2rem;
  }
  
  .sophisticated-markdown li {
    margin: 0.75rem 0;
    line-height: 1.7;
  }
  
  .sophisticated-markdown ul li {
    list-style: none;
    position: relative;
  }
  
  .sophisticated-markdown ul li::before {
    content: '•';
    color: #0066cc;
    font-weight: bold;
    position: absolute;
    left: -1.5rem;
    font-size: 1.2rem;
  }
  
  .sophisticated-markdown ol li {
    counter-increment: item;
  }
  
  .sophisticated-markdown ol {
    counter-reset: item;
  }
  
  .sophisticated-markdown ol li::marker {
    color: #0066cc;
    font-weight: 600;
  }
  
  /* Code blocks */
  .sophisticated-markdown pre {
    background: #f8fafc;
    border: 1px solid #e2e8f0;
    border-radius: 12px;
    padding: 1.5rem;
    margin: 2rem 0;
    overflow-x: auto;
    font-size: 0.9rem;
    line-height: 1.6;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  }
  
  .sophisticated-markdown code {
    background: #f1f5f9;
    color: #475569;
    padding: 0.25rem 0.5rem;
    border-radius: 6px;
    font-size: 0.9em;
    font-weight: 500;
    font-family: 'SF Mono', Monaco, Consolas, 'Liberation Mono', monospace;
    border: 1px solid #e2e8f0;
  }
  
  .sophisticated-markdown pre code {
    background: transparent;
    color: inherit;
    padding: 0;
    border: none;
    font-size: inherit;
  }
  
  /* Blockquotes */
  .sophisticated-markdown blockquote {
    margin: 2rem 0;
    padding: 1.5rem 2rem;
    background: linear-gradient(135deg, #f8fafc, #f1f5f9);
    border-left: 4px solid #0066cc;
    border-radius: 0 12px 12px 0;
    font-style: italic;
    color: #475569;
    position: relative;
  }
  
  .sophisticated-markdown blockquote::before {
    content: '"';
    position: absolute;
    top: -0.5rem;
    left: 1rem;
    font-size: 4rem;
    color: #cbd5e1;
    font-family: Georgia, serif;
  }
  
  .sophisticated-markdown blockquote p {
    margin: 0;
    font-size: 1.1rem;
    line-height: 1.6;
  }
  
  /* Tables */
  .sophisticated-markdown table {
    width: 100%;
    border-collapse: collapse;
    margin: 2rem 0;
    background: white;
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  }
  
  .sophisticated-markdown th,
  .sophisticated-markdown td {
    padding: 1rem 1.5rem;
    text-align: left;
    border-bottom: 1px solid #e5e7eb;
  }
  
  .sophisticated-markdown th {
    background: #f9fafb;
    font-weight: 600;
    color: #374151;
  }
  
  .sophisticated-markdown tr:hover {
    background: #f9fafb;
  }
  
  /* Images */
  .sophisticated-markdown img {
    max-width: 100%;
    height: auto;
    margin: 2rem auto;
    display: block;
    border-radius: 12px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
  }
  
  /* Horizontal rules */
  .sophisticated-markdown hr {
    border: none;
    height: 1px;
    background: linear-gradient(135deg, transparent, #e5e7eb, transparent);
    margin: 3rem 0;
  }
  
  /* Strong and emphasis */
  .sophisticated-markdown strong {
    font-weight: 700;
    color: #1f2937;
  }
  
  .sophisticated-markdown em {
    font-style: italic;
    color: #4b5563;
  }
  
  /* Smooth animations */
  article {
    animation: fade-in 0.6s ease-out;
  }
  
  @keyframes fade-in {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  /* Responsive design */
  @media (max-width: 768px) {
    .sophisticated-markdown {
      font-size: 1rem;
      line-height: 1.7;
    }
    
    .sophisticated-markdown h1 {
      font-size: 1.875rem;
    }
    
    .sophisticated-markdown h2 {
      font-size: 1.5rem;
    }
    
    .sophisticated-markdown h3 {
      font-size: 1.25rem;
    }
    
    .sophisticated-markdown p:first-of-type {
      font-size: 1.125rem;
    }
    
    .sophisticated-markdown pre {
      padding: 1rem;
      font-size: 0.8rem;
    }
    
    .sophisticated-markdown blockquote {
      padding: 1rem 1.5rem;
      margin: 1.5rem 0;
    }
    
    .sophisticated-markdown th,
    .sophisticated-markdown td {
      padding: 0.75rem 1rem;
    }
  }
</style>