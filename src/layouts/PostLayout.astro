---
import Layout from './Layout.astro';
import { calculateReadingTime } from '../utils/readingTime';

export interface Props {
  title: string;
  date: Date;
  tags?: string[];
  description?: string;
  showMeta?: boolean;
  showComments?: boolean;
  content?: string;
}

const { title, date, tags, description, showMeta = true, showComments = true, content } = Astro.props;

// Check if this is a hidden/static page based on title
const isStaticPage = title === 'Research' || title === 'CV';
const actualShowMeta = isStaticPage ? false : showMeta;
const actualShowComments = isStaticPage ? false : showComments;

// Calculate reading time if content is provided
const readingTimeData = content ? calculateReadingTime(content) : null;
---

<Layout title={title} description={description}>
  <!-- Sophisticated article layout with enhanced typography -->
  <article style="
    max-width: 45rem;
    margin: 0 auto;
    padding: 3rem 1.5rem;
    min-height: 100vh;
  ">
    <!-- Elegant header with improved typography -->
    <header style="
      margin-bottom: 3rem;
      padding-bottom: 2rem;
      border-bottom: 1px solid rgba(0, 0, 0, 0.06);
    ">
      <h1 style="
        font-size: 2.5rem;
        font-weight: 800;
        line-height: 1.1;
        letter-spacing: -0.025em;
        margin-bottom: 1.5rem;
        background: linear-gradient(135deg, #1f2937, #4b5563, #0066cc);
        -webkit-background-clip: text;
        background-clip: text;
        color: transparent;
      ">{title}</h1>
      
      {actualShowMeta && (
        <div style="
          display: flex;
          align-items: center;
          gap: 1.5rem;
          color: #6b7280;
          margin-bottom: 1.5rem;
          font-size: 0.9rem;
          flex-wrap: wrap;
        ">
          <time style="font-weight: 500;">
            {date.toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })}
          </time>
          {readingTimeData && (
            <div style="
              display: flex;
              align-items: center;
              gap: 0.5rem;
            ">
              <svg style="width: 1rem; height: 1rem; opacity: 0.7;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
              <span style="font-weight: 500;">{readingTimeData.readingTimeText}</span>
            </div>
          )}
          {readingTimeData && (
            <div style="
              display: flex;
              align-items: center;
              gap: 0.5rem;
              opacity: 0.8;
            ">
              <svg style="width: 1rem; height: 1rem; opacity: 0.7;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
              </svg>
              <span style="font-size: 0.85rem;">{readingTimeData.wordCount} words</span>
            </div>
          )}
        </div>
      )}
      
      {tags && tags.length > 0 && (
        <div style="display: flex; flex-wrap: wrap; gap: 0.75rem;">
          {tags.map((tag) => (
            <a 
              href={`/posts/tags/#tag-${tag.toLowerCase().replace(/\s+/g, '-')}`}
              style="
                display: inline-flex;
                align-items: center;
                padding: 0.5rem 1rem;
                font-size: 0.8rem;
                font-weight: 500;
                background: linear-gradient(135deg, #f8fafc, #e2e8f0);
                color: #475569;
                border-radius: 2rem;
                text-decoration: none;
                transition: all 0.2s ease;
                border: 1px solid rgba(0, 0, 0, 0.05);
              "
              class="tag-link"
            >
              {tag}
            </a>
          ))}
        </div>
      )}
    </header>
    
    <!-- Enhanced markdown content with sophisticated typography -->
    <div class="sophisticated-markdown">
      <slot />
    </div>
    
    {actualShowComments && (
      <div style="
        margin-top: 4rem;
        padding-top: 2rem;
        border-top: 1px solid rgba(0, 0, 0, 0.06);
      ">
        <script
          src="https://giscus.app/client.js"
          data-repo="ShoKuno5/shokuno5.github.io"
          data-repo-id="R_kgDOO_0Lcg"
          data-category="Announcements"
          data-category-id="DIC_kwDOO_0Lcs4Cr6Ty"
          data-mapping="pathname"
          data-strict="0"
          data-reactions-enabled="1"
          data-emit-metadata="0"
          data-input-position="bottom"
          data-theme="preferred_color_scheme"
          data-lang="en"
          data-loading="lazy"
          crossorigin="anonymous"
          async
          is:inline>
        </script>
      </div>
    )}
  </article>
</Layout>

<!-- Silent Reading Progress Script -->
<script is:inline>
(function() {
  'use strict';
  
  function updateSilentProgress() {
    const article = document.querySelector('article');
    if (!article) return;
    
    const windowHeight = window.innerHeight;
    const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
    const documentHeight = document.documentElement.scrollHeight - windowHeight;
    
    // Calculate overall scroll progress through the entire article (0-100%)
    let overallProgress = 0;
    if (documentHeight > 0) {
      overallProgress = Math.min((scrollTop / documentHeight) * 100, 100);
    }
    
    console.log(`Scroll: ${scrollTop}px / ${documentHeight}px = ${Math.round(overallProgress)}% overall progress`);
    
    // Find all h2 elements in the article
    const headings = article.querySelectorAll('.sophisticated-markdown h2');
    if (headings.length === 0) return;
    
    const viewportMiddle = scrollTop + windowHeight / 2;
    
    // Find which section we're currently reading
    let currentSectionIndex = -1;
    
    for (let i = 0; i < headings.length; i++) {
      const heading = headings[i];
      const headingTop = heading.offsetTop;
      const nextHeading = headings[i + 1];
      const nextHeadingTop = nextHeading ? nextHeading.offsetTop : document.body.scrollHeight;
      
      // Check if we're currently in this section
      if (viewportMiddle >= headingTop && viewportMiddle < nextHeadingTop) {
        currentSectionIndex = i;
        break;
      }
    }
    
    // Update all headings - but only current section shows the overall article progress
    headings.forEach((heading, index) => {
      const headingTop = heading.offsetTop;
      
      if (index < currentSectionIndex) {
        // Completed sections - show full progress
        heading.style.setProperty('--progress-width', '100%');
      } else if (index === currentSectionIndex) {
        // Current section - show OVERALL article progress (not section progress)
        let progressWidth;
        if (overallProgress <= 3) {
          progressWidth = '3rem';
        } else {
          // This is the key fix - show overall article progress
          progressWidth = `${Math.min(overallProgress, 100)}%`;
        }
        heading.style.setProperty('--progress-width', progressWidth);
        console.log(`Article progress: ${Math.round(overallProgress)}% shown in section ${index + 1}`);
      } else {
        // Future sections - stay at default until reached
        heading.style.setProperty('--progress-width', '3rem');
      }
    });
  }
  
  // Throttle scroll events for performance
  let ticking = false;
  function handleScroll() {
    if (!ticking) {
      requestAnimationFrame(function() {
        updateSilentProgress();
        ticking = false;
      });
      ticking = true;
    }
  }
  
  // Handle touch events for mobile
  function handleTouch() {
    setTimeout(updateSilentProgress, 50);
  }
  
  // Initialize when DOM is ready
  function init() {
    updateSilentProgress(); // Initial calculation
    
    // Add scroll listeners
    window.addEventListener('scroll', handleScroll, { passive: true });
    
    // Add touch listeners for mobile
    window.addEventListener('touchmove', handleTouch, { passive: true });
    window.addEventListener('touchend', handleTouch, { passive: true });
    
    // Recalculate on resize (orientation change)
    window.addEventListener('resize', function() {
      setTimeout(updateSilentProgress, 100);
    }, { passive: true });
  }
  
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', init);
  } else {
    init();
  }
})();
</script>

<!-- Sophisticated Markdown Typography -->
<style is:global>
  /* Tag hover effects */
  .tag-link:hover {
    background: linear-gradient(135deg, #e2e8f0, #cbd5e1) !important;
    transform: translateY(-1px) !important;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1) !important;
    color: #334155 !important;
  }
  
  /* Enhanced markdown styling for sophisticated typography */
  .sophisticated-markdown {
    font-family: 'Inter', 'Noto Sans JP', -apple-system, BlinkMacSystemFont, system-ui, sans-serif;
    font-size: 1.125rem;
    line-height: 1.8;
    color: #374151;
    letter-spacing: -0.011em;
  }
  
  /* Typography Hierarchy */
  .sophisticated-markdown h1 {
    font-size: 2.25rem;
    font-weight: 800;
    line-height: 1.2;
    letter-spacing: -0.025em;
    margin: 3rem 0 1.5rem 0;
    color: #111827;
    background: linear-gradient(135deg, #111827, #374151);
    -webkit-background-clip: text;
    background-clip: text;
    color: transparent;
  }
  
  .sophisticated-markdown h2 {
    font-size: 1.875rem;
    font-weight: 700;
    line-height: 1.3;
    letter-spacing: -0.025em;
    margin: 2.5rem 0 1.25rem 0;
    color: #1f2937;
    padding-bottom: 0.75rem;
    border-bottom: 2px solid #e5e7eb;
    position: relative;
  }
  
  .sophisticated-markdown h2::after {
    content: '';
    position: absolute;
    bottom: -2px;
    left: 0;
    width: var(--progress-width, 3rem);
    height: 2px;
    background: linear-gradient(135deg, #0066cc, #8b5cf6);
    border-radius: 1px;
    transition: width 0.3s ease-out;
    max-width: 100%;
  }
  
  .sophisticated-markdown h3 {
    font-size: 1.5rem;
    font-weight: 600;
    line-height: 1.4;
    letter-spacing: -0.025em;
    margin: 2rem 0 1rem 0;
    color: #374151;
    position: relative;
    padding-left: 1rem;
  }
  
  .sophisticated-markdown h3::before {
    content: '';
    position: absolute;
    left: 0;
    top: 0.25rem;
    width: 4px;
    height: 1.5rem;
    background: linear-gradient(135deg, #0066cc, #8b5cf6);
    border-radius: 2px;
  }
  
  .sophisticated-markdown h4 {
    font-size: 1.25rem;
    font-weight: 600;
    line-height: 1.5;
    margin: 1.75rem 0 0.75rem 0;
    color: #4b5563;
  }
  
  .sophisticated-markdown h5,
  .sophisticated-markdown h6 {
    font-size: 1.125rem;
    font-weight: 600;
    line-height: 1.5;
    margin: 1.5rem 0 0.5rem 0;
    color: #6b7280;
  }
  
  /* Paragraphs and text */
  .sophisticated-markdown p {
    margin: 1.5rem 0;
    text-align: justify;
    hyphens: auto;
    -webkit-hyphens: auto;
    -moz-hyphens: auto;
  }
  
  .sophisticated-markdown p:first-of-type {
    font-size: 1.2rem;
    line-height: 1.7;
    color: #1f2937;
    font-weight: 400;
  }
  
  /* Links */
  .sophisticated-markdown a {
    color: #0066cc;
    text-decoration: none;
    font-weight: 500;
    border-bottom: 1px solid transparent;
    transition: all 0.2s ease;
    position: relative;
  }
  
  .sophisticated-markdown a:hover {
    color: #0052a3;
    border-bottom-color: #0066cc;
  }
  
  /* Lists */
  .sophisticated-markdown ul,
  .sophisticated-markdown ol {
    margin: 1.5rem 0;
    padding-left: 2rem;
  }
  
  .sophisticated-markdown li {
    margin: 0.75rem 0;
    line-height: 1.7;
  }
  
  .sophisticated-markdown ul li {
    list-style: none;
    position: relative;
  }
  
  .sophisticated-markdown ul li::before {
    content: '•';
    color: #0066cc;
    font-weight: bold;
    position: absolute;
    left: -1.5rem;
    font-size: 1.2rem;
  }
  
  .sophisticated-markdown ol li {
    counter-increment: item;
  }
  
  .sophisticated-markdown ol {
    counter-reset: item;
  }
  
  .sophisticated-markdown ol li::marker {
    color: #0066cc;
    font-weight: 600;
  }
  
  /* Code blocks */
  .sophisticated-markdown pre {
    background: #f8fafc;
    border: 1px solid #e2e8f0;
    border-radius: 12px;
    padding: 1.5rem;
    margin: 2rem 0;
    overflow-x: auto;
    font-size: 0.9rem;
    line-height: 1.6;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  }
  
  .sophisticated-markdown code {
    background: #f1f5f9;
    color: #475569;
    padding: 0.25rem 0.5rem;
    border-radius: 6px;
    font-size: 0.9em;
    font-weight: 500;
    font-family: 'SF Mono', Monaco, Consolas, 'Liberation Mono', monospace;
    border: 1px solid #e2e8f0;
  }
  
  .sophisticated-markdown pre code {
    background: transparent;
    color: inherit;
    padding: 0;
    border: none;
    font-size: inherit;
  }
  
  /* Blockquotes */
  .sophisticated-markdown blockquote {
    margin: 2rem 0;
    padding: 1.5rem 2rem;
    background: linear-gradient(135deg, #f8fafc, #f1f5f9);
    border-left: 4px solid #0066cc;
    border-radius: 0 12px 12px 0;
    font-style: italic;
    color: #475569;
    position: relative;
  }
  
  .sophisticated-markdown blockquote::before {
    content: '"';
    position: absolute;
    top: -0.5rem;
    left: 1rem;
    font-size: 4rem;
    color: #cbd5e1;
    font-family: Georgia, serif;
  }
  
  .sophisticated-markdown blockquote p {
    margin: 0;
    font-size: 1.1rem;
    line-height: 1.6;
  }
  
  /* Tables */
  .sophisticated-markdown table {
    width: 100%;
    border-collapse: collapse;
    margin: 2rem 0;
    background: white;
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  }
  
  .sophisticated-markdown th,
  .sophisticated-markdown td {
    padding: 1rem 1.5rem;
    text-align: left;
    border-bottom: 1px solid #e5e7eb;
  }
  
  .sophisticated-markdown th {
    background: #f9fafb;
    font-weight: 600;
    color: #374151;
  }
  
  .sophisticated-markdown tr:hover {
    background: #f9fafb;
  }
  
  /* Images */
  .sophisticated-markdown img {
    max-width: 100%;
    height: auto;
    margin: 2rem auto;
    display: block;
    border-radius: 12px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
  }
  
  /* Horizontal rules */
  .sophisticated-markdown hr {
    border: none;
    height: 1px;
    background: linear-gradient(135deg, transparent, #e5e7eb, transparent);
    margin: 3rem 0;
  }
  
  /* Strong and emphasis */
  .sophisticated-markdown strong {
    font-weight: 700;
    color: #1f2937;
  }
  
  .sophisticated-markdown em {
    font-style: italic;
    color: #4b5563;
  }
  
  /* Responsive design */
  @media (max-width: 768px) {
    .sophisticated-markdown {
      font-size: 1rem;
      line-height: 1.7;
    }
    
    .sophisticated-markdown h1 {
      font-size: 1.875rem;
    }
    
    .sophisticated-markdown h2 {
      font-size: 1.5rem;
    }
    
    .sophisticated-markdown h3 {
      font-size: 1.25rem;
    }
    
    .sophisticated-markdown p:first-of-type {
      font-size: 1.125rem;
    }
    
    .sophisticated-markdown pre {
      padding: 1rem;
      font-size: 0.8rem;
    }
    
    .sophisticated-markdown blockquote {
      padding: 1rem 1.5rem;
      margin: 1.5rem 0;
    }
    
    .sophisticated-markdown th,
    .sophisticated-markdown td {
      padding: 0.75rem 1rem;
    }
  }
</style>