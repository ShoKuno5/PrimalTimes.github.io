---
import Layout from './Layout.astro';
import { calculateReadingTime } from '../utils/readingTime';

export interface Props {
  title: string;
  date?: Date;
  modified?: Date;
  tags?: string[];
  description?: string;
  showMeta?: boolean;
  showComments?: boolean;
  content?: string;
  mode?: 'homepage' | 'full';
  slug?: string;
}

const { title, date, modified, tags, description, showMeta = true, showComments = true, content, mode = 'full', slug } = Astro.props;

// Adaptive display based on mode
const isHomepageMode = mode === 'homepage';
const actualShowMeta = isHomepageMode ? showMeta : showMeta;
const actualShowComments = isHomepageMode ? false : showComments;

// Calculate reading time if content is provided
const readingTimeData = content ? calculateReadingTime(content) : null;
---

{isHomepageMode ? (
  <!-- Homepage mode: just the article -->
  <article style="max-width: 45rem; margin: 0 auto; padding: 3rem 1.5rem;">
    <!-- Elegant header with improved typography -->
    <header style="
      margin-bottom: 3rem;
      padding-bottom: 2rem;
      border-bottom: 1px solid rgba(0, 0, 0, 0.06);
    ">
      {isHomepageMode && slug ? (
        <h1 style="
          font-size: 2.5rem;
          font-weight: 800;
          line-height: 1.1;
          letter-spacing: -0.025em;
          margin-bottom: 1.5rem;
        ">
          <a href={`/posts/${slug}/`} style="
            background: linear-gradient(135deg, #1f2937, #4b5563, #0066cc);
            -webkit-background-clip: text;
            background-clip: text;
            color: transparent;
            text-decoration: none;
            transition: all 0.2s ease;
          " class="gradient-title-link">
            {title}
          </a>
        </h1>
      ) : (
        <h1 style="
          font-size: 2.5rem;
          font-weight: 800;
          line-height: 1.1;
          letter-spacing: -0.025em;
          margin-bottom: 1.5rem;
          background: linear-gradient(135deg, #1f2937, #4b5563, #0066cc);
          -webkit-background-clip: text;
          background-clip: text;
          color: transparent;
        ">{title}</h1>
      )}
      
      {actualShowMeta && (
        <div style="
          display: flex;
          align-items: center;
          gap: 1.5rem;
          color: #6b7280;
          margin-bottom: 1.5rem;
          font-size: 0.9rem;
          flex-wrap: wrap;
        ">
          <div style="display: flex; flex-direction: column; gap: 0.25rem;">
            {date && (
              <time style="font-weight: 500;">
                Published: {date.toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })}
              </time>
            )}
            {modified && date && modified.getTime() !== date.getTime() && (
              <time style="font-size: 0.85rem; opacity: 0.8;">
                Updated: {modified.toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })}
              </time>
            )}
          </div>
          {readingTimeData && (
            <div style="
              display: flex;
              align-items: center;
              gap: 0.5rem;
            ">
              <svg style="width: 1rem; height: 1rem; opacity: 0.7;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
              <span style="font-weight: 500;">{readingTimeData.readingTimeText}</span>
            </div>
          )}
          {readingTimeData && (
            <div style="
              display: flex;
              align-items: center;
              gap: 0.5rem;
              opacity: 0.8;
            ">
              <svg style="width: 1rem; height: 1rem; opacity: 0.7;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
              </svg>
              <span style="font-size: 0.85rem;">{readingTimeData.wordCount} words</span>
            </div>
          )}
        </div>
      )}
      
      {tags && tags.length > 0 && (
        <div style="display: flex; flex-wrap: wrap; gap: 0.75rem;">
          {tags.map((tag) => (
            <a 
              href={`/posts/tags/#tag-${tag.toLowerCase().replace(/\s+/g, '-')}`}
              style="
                display: inline-flex;
                align-items: center;
                padding: 0.5rem 1rem;
                font-size: 0.8rem;
                font-weight: 500;
                background: linear-gradient(135deg, #f8fafc, #e2e8f0);
                color: #475569;
                border-radius: 2rem;
                text-decoration: none;
                transition: all 0.2s ease;
                border: 1px solid rgba(0, 0, 0, 0.05);
              "
              class="tag-link"
            >
              {tag}
            </a>
          ))}
        </div>
      )}
    </header>
    
    <!-- Enhanced markdown content with sophisticated typography -->
    <div class="sophisticated-markdown citations-enabled">
      <slot />
    </div>
    
    
    {actualShowComments && (
      <div style="
        margin-top: 4rem;
        padding-top: 2rem;
        border-top: 1px solid rgba(0, 0, 0, 0.06);
      ">
        <script
          src="https://giscus.app/client.js"
          data-repo="ShoKuno5/shokuno5.github.io"
          data-repo-id="R_kgDOO_0Lcg"
          data-category="Announcements"
          data-category-id="DIC_kwDOO_0Lcs4Cr6Ty"
          data-mapping="pathname"
          data-strict="0"
          data-reactions-enabled="1"
          data-emit-metadata="0"
          data-input-position="bottom"
          data-theme="preferred_color_scheme"
          data-lang="en"
          data-loading="lazy"
          crossorigin="anonymous"
          async
          is:inline>
        </script>
      </div>
    )}
    
    {isHomepageMode && slug && (
      <div style="
        margin-top: 2rem;
        padding-top: 1.5rem;
        border-top: 1px solid rgba(0, 0, 0, 0.04);
      ">
        <a 
          href={`/posts/${slug}/`}
          style="
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            color: #0066cc;
            text-decoration: none;
            font-weight: 500;
            font-size: 0.9rem;
            transition: color 0.2s ease;
          "
          onmouseover="this.style.color='#0052a3'"
          onmouseout="this.style.color='#0066cc'"
        >
          Join the discussion
          <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-3.582 8-8 8a8.959 8.959 0 01-4.906-1.465L3 21l2.535-5.094A8.963 8.963 0 013 12c0-4.418 3.582-8 8-8s8 3.582 8 8z" />
          </svg>
        </a>
      </div>
    )}
  </article>
) : (
  <!-- Individual post mode: full layout -->
  <Layout title={title} description={description}>
    <article style="max-width: 45rem; margin: 0 auto; padding: 3rem 1.5rem; min-height: 100vh;">
      <!-- Elegant header with improved typography -->
      <header style="
        margin-bottom: 3rem;
        padding-bottom: 2rem;
        border-bottom: 1px solid rgba(0, 0, 0, 0.06);
      ">
        <h1 style="
          font-size: 2.5rem;
          font-weight: 800;
          line-height: 1.1;
          letter-spacing: -0.025em;
          margin-bottom: 1.5rem;
          background: linear-gradient(135deg, #1f2937, #4b5563, #0066cc);
          -webkit-background-clip: text;
          background-clip: text;
          color: transparent;
        ">{title}</h1>
        
        {actualShowMeta && (
          <div style="
            display: flex;
            align-items: center;
            gap: 1.5rem;
            color: #6b7280;
            margin-bottom: 1.5rem;
            font-size: 0.9rem;
            flex-wrap: wrap;
          ">
            <div style="display: flex; flex-direction: column; gap: 0.25rem;">
              {date && (
                <time style="font-weight: 500;">
                  Published: {date.toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })}
                </time>
              )}
              {modified && date && modified.getTime() !== date.getTime() && (
                <time style="font-size: 0.85rem; opacity: 0.8;">
                  Updated: {modified.toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })}
                </time>
              )}
            </div>
            {readingTimeData && (
              <div style="
                display: flex;
                align-items: center;
                gap: 0.5rem;
              ">
                <svg style="width: 1rem; height: 1rem; opacity: 0.7;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                <span style="font-weight: 500;">{readingTimeData.readingTimeText}</span>
              </div>
            )}
            {readingTimeData && (
              <div style="
                display: flex;
                align-items: center;
                gap: 0.5rem;
                opacity: 0.8;
              ">
                <svg style="width: 1rem; height: 1rem; opacity: 0.7;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                </svg>
                <span style="font-size: 0.85rem;">{readingTimeData.wordCount} words</span>
              </div>
            )}
          </div>
        )}
        
        {tags && tags.length > 0 && (
          <div style="display: flex; flex-wrap: wrap; gap: 0.75rem;">
            {tags.map((tag) => (
              <a 
                href={`/posts/tags/#tag-${tag.toLowerCase().replace(/\s+/g, '-')}`}
                style="
                  display: inline-flex;
                  align-items: center;
                  padding: 0.5rem 1rem;
                  font-size: 0.8rem;
                  font-weight: 500;
                  background: linear-gradient(135deg, #f8fafc, #e2e8f0);
                  color: #475569;
                  border-radius: 2rem;
                  text-decoration: none;
                  transition: all 0.2s ease;
                  border: 1px solid rgba(0, 0, 0, 0.05);
                "
                class="tag-link"
              >
                {tag}
              </a>
            ))}
          </div>
        )}
      </header>
      
      <!-- Enhanced markdown content with sophisticated typography -->
      <div class="sophisticated-markdown citations-enabled">
        <slot />
      </div>
      
      
      {actualShowComments && (
        <div style="
          margin-top: 4rem;
          padding-top: 2rem;
          border-top: 1px solid rgba(0, 0, 0, 0.06);
        ">
          <script
            src="https://giscus.app/client.js"
            data-repo="ShoKuno5/shokuno5.github.io"
            data-repo-id="R_kgDOO_0Lcg"
            data-category="Announcements"
            data-category-id="DIC_kwDOO_0Lcs4Cr6Ty"
            data-mapping="pathname"
            data-strict="0"
            data-reactions-enabled="1"
            data-emit-metadata="0"
            data-input-position="bottom"
            data-theme="preferred_color_scheme"
            data-lang="en"
            data-loading="lazy"
            crossorigin="anonymous"
            async
            is:inline>
          </script>
        </div>
      )}
    </article>
  </Layout>
)}

{!isHomepageMode && (
<!-- Silent Reading Progress Script - Only for individual posts (not static pages) -->
<script is:inline>
(function() {
  'use strict';
  
  function updateSilentProgress() {
    const article = document.querySelector('article');
    if (!article) return;
    
    const windowHeight = window.innerHeight;
    const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
    const documentHeight = document.documentElement.scrollHeight - windowHeight;
    
    // Calculate overall scroll progress through the entire article (0-100%)
    let overallProgress = 0;
    if (documentHeight > 0) {
      overallProgress = Math.min((scrollTop / documentHeight) * 100, 100);
    }
    
    // Find all h2 elements in the article
    const headings = article.querySelectorAll('.sophisticated-markdown h2');
    if (headings.length === 0) return;
    
    const viewportMiddle = scrollTop + windowHeight / 2;
    
    // Find which section we're currently reading
    let currentSectionIndex = -1;
    
    for (let i = 0; i < headings.length; i++) {
      const heading = headings[i];
      const headingTop = heading.offsetTop;
      const nextHeading = headings[i + 1];
      const nextHeadingTop = nextHeading ? nextHeading.offsetTop : document.body.scrollHeight;
      
      // Check if we're currently in this section
      if (viewportMiddle >= headingTop && viewportMiddle < nextHeadingTop) {
        currentSectionIndex = i;
        break;
      }
    }
    
    // Store the maximum progress reached for each section
    if (!window.sectionMaxProgress) {
      window.sectionMaxProgress = {};
    }
    
    // Update current section's max progress
    if (currentSectionIndex >= 0) {
      const sectionKey = `section-${currentSectionIndex}`;
      const currentProgress = overallProgress;
      
      // Store the highest progress reached for this section
      if (!window.sectionMaxProgress[sectionKey] || currentProgress > window.sectionMaxProgress[sectionKey]) {
        window.sectionMaxProgress[sectionKey] = currentProgress;
      }
    }
    
    // Update all headings based on their actual reading progress
    headings.forEach((heading, index) => {
      const sectionKey = `section-${index}`;
      
      if (index < currentSectionIndex) {
        // Past sections - show the maximum progress actually achieved in that section
        const maxProgressInSection = window.sectionMaxProgress[sectionKey] || 3;
        let progressWidth;
        if (maxProgressInSection <= 3) {
          progressWidth = '3rem';
        } else {
          progressWidth = `${Math.min(maxProgressInSection, 100)}%`;
        }
        heading.style.setProperty('--progress-width', progressWidth);
      } else if (index === currentSectionIndex) {
        // Current section - show live overall progress
        let progressWidth;
        if (overallProgress <= 3) {
          progressWidth = '3rem';
        } else {
          progressWidth = `${Math.min(overallProgress, 100)}%`;
        }
        heading.style.setProperty('--progress-width', progressWidth);
      } else {
        // Future sections - check if they're visible on screen
        const headingRect = heading.getBoundingClientRect();
        const isVisible = headingRect.top < windowHeight && headingRect.bottom > 0;
        
        if (isVisible) {
          // Section is visible - show current overall progress
          let progressWidth;
          if (overallProgress <= 3) {
            progressWidth = '3rem';
          } else {
            progressWidth = `${Math.min(overallProgress, 100)}%`;
          }
          heading.style.setProperty('--progress-width', progressWidth);
        } else {
          // Section is not visible - keep at default
          heading.style.setProperty('--progress-width', '3rem');
        }
      }
    });
  }
  
  // Throttle scroll events for performance
  let ticking = false;
  function handleScroll() {
    if (!ticking) {
      requestAnimationFrame(function() {
        updateSilentProgress();
        ticking = false;
      });
      ticking = true;
    }
  }
  
  // Handle touch events for mobile
  function handleTouch() {
    setTimeout(updateSilentProgress, 50);
  }
  
  // Initialize when DOM is ready
  function init() {
    updateSilentProgress(); // Initial calculation
    
    // Add scroll listeners
    window.addEventListener('scroll', handleScroll, { passive: true });
    
    // Add touch listeners for mobile
    window.addEventListener('touchmove', handleTouch, { passive: true });
    window.addEventListener('touchend', handleTouch, { passive: true });
    
    // Recalculate on resize (orientation change)
    window.addEventListener('resize', function() {
      setTimeout(updateSilentProgress, 100);
    }, { passive: true });
  }
  
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', init);
  } else {
    init();
  }
})();
</script>
)}

<!-- Citation Processing Script -->
<script is:inline>
// Client-side citation processing with numbers
function processCitationsInContent(content, bibliography) {
  // First pass: extract all citation keys to assign numbers
  const usedCitations = new Set();
  const citeRegex = /\\cite\{([^}]+)\}/g;
  let match;
  while ((match = citeRegex.exec(content)) !== null) {
    usedCitations.add(match[1]);
  }
  
  // Sort citations and assign numbers
  const sortedKeys = Array.from(usedCitations).sort();
  const citationNumbers = new Map();
  sortedKeys.forEach(function(key, index) {
    citationNumbers.set(key, index + 1);
  });
  
  // Replace \cite{key} with numbered citations
  return content.replace(/\\cite\{([^}]+)\}/g, function(match, key) {
    if (bibliography.has(key)) {
      const citationNumber = citationNumbers.get(key);
      return '<cite data-cite="' + key + '"><a href="#ref-' + key + '" class="citation-link">[' + citationNumber + ']</a></cite>';
    }
    return '<span class="citation-error">[' + key + '?]</span>';
  });
}

function generateBibliographyHtml(bibliography, usedCitations) {
  const sortedKeys = Array.from(usedCitations).sort();
  
  let html = '<div class="bibliography"><h2 class="bibliography-title" style="color: #1f2937 !important;">References</h2><div class="bibliography-list">';
  
  for (let i = 0; i < sortedKeys.length; i++) {
    const key = sortedKeys[i];
    const entry = bibliography.get(key);
    if (!entry) continue;
    
    const citationNumber = i + 1;
    
    // APA 7th edition formatting
    const authors = formatAuthorsAPA(entry.entryTags.author || 'Unknown Author');
    let title = entry.entryTags.title || 'Untitled';
    // Clean LaTeX formatting
    title = title.replace(/\\?\{\{([^}]+)\}\}/g, '$1')  // Remove \{{...}}
                 .replace(/\\?\{([^}]+)\}/g, '$1')      // Remove \{...}
                 .replace(/\s+/g, ' ')                  // Normalize spaces
                 .trim();
    const year = entry.entryTags.year || 'n.d.';
    const journal = entry.entryTags.journal || '';
    const volume = entry.entryTags.volume || '';
    const number = entry.entryTags.number || '';
    const pages = entry.entryTags.pages || '';
    const doi = entry.entryTags.doi || '';
    const url = entry.entryTags.url || 
                (doi ? 'https://doi.org/' + doi : '') ||
                (entry.entryTags.eprint ? 'https://arxiv.org/abs/' + entry.entryTags.eprint : '');

    html += '<div class="bibliography-entry" id="ref-' + key + '">';
    html += '<div class="citation-layout">';
    
    // Add citation number
    html += '<span class="citation-number">[' + (i + 1) + ']</span>';
    
    // Content in separate div for proper alignment
    html += '<div class="citation-content">';
    html += authors + ' (' + year + '). <em>' + title + '</em>.';
    
    if (journal) {
      html += ' <em>' + journal + '</em>.';
    }
    
    // Add URL 
    if (url) {
      html += ' <a href="' + url + '" target="_blank" rel="noopener noreferrer">' + url + '</a>';
    }
    
    html += '</div></div></div>';
  }
  
  html += '</div></div>';
  
  return html;
}

// APA formatting helper functions
function formatAuthorsAPA(authorString) {
  if (!authorString) return 'Unknown Author';
  
  const authors = authorString.split(/ and | & |, and |, & /).map(function(author) { return author.trim(); });
  
  if (authors.length === 1) {
    return formatSingleAuthorAPA(authors[0]);
  } else if (authors.length === 2) {
    return formatSingleAuthorAPA(authors[0]) + ', & ' + formatSingleAuthorAPA(authors[1]);
  } else if (authors.length <= 20) {
    const formattedAuthors = authors.slice(0, -1).map(formatSingleAuthorAPA);
    return formattedAuthors.join(', ') + ', & ' + formatSingleAuthorAPA(authors[authors.length - 1]);
  } else {
    const formattedAuthors = authors.slice(0, 19).map(formatSingleAuthorAPA);
    return formattedAuthors.join(', ') + ', ... ' + formatSingleAuthorAPA(authors[authors.length - 1]);
  }
}

function formatSingleAuthorAPA(author) {
  if (author.includes(',')) {
    const parts = author.split(',').map(function(s) { return s.trim(); });
    const last = parts[0];
    const first = parts[1] || '';
    return last + ', ' + getInitials(first);
  } else {
    const parts = author.split(' ').filter(function(part) { return part.length > 0; });
    if (parts.length === 1) return parts[0];
    const last = parts[parts.length - 1];
    const firstMiddle = parts.slice(0, -1).join(' ');
    return last + ', ' + getInitials(firstMiddle);
  }
}

function getInitials(names) {
  return names.split(' ')
    .filter(function(name) { return name.length > 0; })
    .map(function(name) { return name.charAt(0).toUpperCase() + '.'; })
    .join(' ');
}

function formatPagesAPA(pages) {
  if (pages.includes('-') || pages.includes('–')) {
    const parts = pages.split(/[-–]/).map(function(p) { return p.trim(); });
    return parts[0] + '–' + parts[1];
  }
  return pages;
}

// Initialize citation processing on page load
document.addEventListener('DOMContentLoaded', async function() {
  // Check if this page has citations
  const content = document.querySelector('.sophisticated-markdown');
  if (!content) return;
  
  const contentText = content.innerHTML;
  if (!contentText.includes('\\cite{')) return;
  
  try {
    // Load bibliography data from the server
    const response = await fetch('/api/bibliography.json');
    if (!response.ok) return;
    
    const bibliographyData = await response.json();
    const bibliography = new Map(bibliographyData);
    
    // Process citations in content
    const processedContent = processCitationsInContent(contentText, bibliography);
    content.innerHTML = processedContent;
    
    // Extract used citations
    const usedCitations = new Set();
    const citeRegex = /\\cite\{([^}]+)\}/g;
    let match;
    while ((match = citeRegex.exec(contentText)) !== null) {
      usedCitations.add(match[1]);
    }
    
    // Generate and append bibliography if citations exist
    if (usedCitations.size > 0) {
      const bibliographyHtml = generateBibliographyHtml(bibliography, usedCitations);
      content.insertAdjacentHTML('afterend', bibliographyHtml);
    }
  } catch (error) {
    console.error('Error processing citations:', error);
  }
});
</script>

<!-- Sophisticated Markdown Typography with Citation Styles -->
<style is:global>
  /* Tag hover effects */
  .tag-link:hover {
    background: linear-gradient(135deg, #e2e8f0, #cbd5e1) !important;
    transform: translateY(-1px) !important;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1) !important;
    color: #334155 !important;
  }
  
  /* Citation-specific styles */
  .citations-enabled cite {
    font-style: normal;
    font-size: 0.9em;
    color: #2563eb;
  }
  
  .citations-enabled .citation-link {
    text-decoration: none;
    color: inherit;
    padding: 0.1em 0.2em;
    border-radius: 0.2em;
    transition: background-color 0.2s ease;
    font-weight: 500;
  }
  
  .citations-enabled .citation-link:hover {
    background-color: #e0e7ff;
    text-decoration: underline;
  }
  
  .citations-enabled .citation-error {
    color: #dc2626;
    font-weight: bold;
    background-color: #fef2f2;
    padding: 0.1em 0.3em;
    border-radius: 0.2em;
  }

  /* Bibliography container - neutral styling */
  .bibliography {
    margin-top: 3rem !important;
    padding: 2rem 0 0 0 !important;
    border-top: 1px solid #e5e7eb !important;
  }
  
  /* References TITLE - ensure visibility */
  .bibliography .bibliography-title {
    font-size: 1.5rem !important;
    font-weight: 600 !important;
    margin: 0 0 1.5rem 0 !important;
    padding: 0.5rem 0 !important;
    color: #1f2937 !important;
    background: transparent !important;
    border: none !important;
    border-radius: 0 !important;
    position: static !important;
    letter-spacing: normal !important;
    line-height: 1.2 !important;
  }
  
  .bibliography h2.bibliography-title::after,
  .bibliography .bibliography-title::after {
    display: none !important;
    content: none !important;
  }
  
  .bibliography-list {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }
  
  /* Let Bibliography.astro component handle entry styling, but add layout styles */
  
  .bibliography-entry .citation-layout {
    display: flex;
    align-items: flex-start;
    gap: 0.75rem;
  }
  
  .bibliography-entry .citation-number {
    font-weight: 600;
    color: #3b82f6;
    flex-shrink: 0;
    min-width: 2rem;
    text-align: left;
  }
  
  .bibliography-entry .citation-content {
    flex: 1;
    line-height: 1.6;
  }
  
  .bibliography-entry .citation-content {
    display: inline;
  }
  
  .bibliography-entry .authors {
    font-weight: 600;
    color: #1f2937;
  }
  
  .bibliography-entry .year {
    color: #6b7280;
    margin-left: 0.5rem;
  }
  
  .bibliography-entry .title {
    font-style: italic;
    margin-left: 0.5rem;
    color: #374151;
  }
  
  .bibliography-entry .journal {
    color: #6b7280;
  }
  
  .bibliography-entry a,
  .bibliography-entry .citation-url {
    color: #2563eb !important;
    text-decoration: none !important;
    font-weight: 500 !important;
  }
  
  .bibliography-entry a:hover,
  .bibliography-entry .citation-url:hover {
    text-decoration: underline !important;
    color: #1d4ed8 !important;
  }
  
  /* Dark mode styling */
  @media (prefers-color-scheme: dark) {
    /* References title - ensure visibility in dark mode */
    .bibliography .bibliography-title {
      color: #f9fafb !important;
    }
    
    /* Dark mode for citation numbers */
    .bibliography-entry .citation-number {
      color: #60a5fa;
    }
  }

  /* Enhanced markdown styling for sophisticated typography */
  .sophisticated-markdown {
    font-family: 'Inter', 'Noto Sans JP', -apple-system, BlinkMacSystemFont, system-ui, sans-serif;
    font-size: 1.125rem;
    line-height: 1.8;
    color: #374151;
    letter-spacing: -0.011em;
  }
  
  /* Typography Hierarchy */
  .sophisticated-markdown h1 {
    font-size: 2.25rem;
    font-weight: 800;
    line-height: 1.2;
    letter-spacing: -0.025em;
    margin: 3rem 0 1.5rem 0;
    color: #111827;
    background: linear-gradient(135deg, #111827, #374151);
    -webkit-background-clip: text;
    background-clip: text;
    color: transparent;
  }
  
  .sophisticated-markdown h2 {
    font-size: 1.875rem;
    font-weight: 700;
    line-height: 1.3;
    letter-spacing: -0.025em;
    margin: 2.5rem 0 1.25rem 0;
    color: #1f2937;
    padding-bottom: 0.75rem;
    border-bottom: 2px solid #e5e7eb;
    position: relative;
  }
  
  .sophisticated-markdown h2::after {
    content: '';
    position: absolute;
    bottom: -2px;
    left: 0;
    width: var(--progress-width, 3rem);
    height: 2px;
    background: linear-gradient(135deg, #0066cc, #8b5cf6);
    border-radius: 1px;
    transition: width 0.3s ease-out;
    max-width: 100%;
  }
  
  .sophisticated-markdown h3 {
    font-size: 1.5rem;
    font-weight: 600;
    line-height: 1.4;
    letter-spacing: -0.025em;
    margin: 2rem 0 1rem 0;
    color: #374151;
    position: relative;
    padding-left: 1rem;
  }
  
  .sophisticated-markdown h3::before {
    content: '';
    position: absolute;
    left: 0;
    top: 0.25rem;
    width: 4px;
    height: 1.5rem;
    background: linear-gradient(135deg, #0066cc, #8b5cf6);
    border-radius: 2px;
  }
  
  .sophisticated-markdown h4 {
    font-size: 1.25rem;
    font-weight: 600;
    line-height: 1.5;
    margin: 1.75rem 0 0.75rem 0;
    color: #4b5563;
  }
  
  .sophisticated-markdown h5,
  .sophisticated-markdown h6 {
    font-size: 1.125rem;
    font-weight: 600;
    line-height: 1.5;
    margin: 1.5rem 0 0.5rem 0;
    color: #6b7280;
  }
  
  /* Paragraphs and text */
  .sophisticated-markdown p {
    margin: 1.5rem 0;
    text-align: justify;
    hyphens: auto;
    -webkit-hyphens: auto;
    -moz-hyphens: auto;
  }
  
  .sophisticated-markdown p:first-of-type {
    font-size: 1.2rem;
    line-height: 1.7;
    color: #1f2937;
    font-weight: 400;
  }
  
  /* Links */
  .sophisticated-markdown a {
    color: #0066cc;
    text-decoration: none;
    font-weight: 500;
    border-bottom: 1px solid transparent;
    transition: all 0.2s ease;
    position: relative;
  }
  
  .sophisticated-markdown a:hover {
    color: #0052a3;
    border-bottom-color: #0066cc;
  }
  
  /* Lists */
  .sophisticated-markdown ul,
  .sophisticated-markdown ol {
    margin: 1.5rem 0;
    padding-left: 2rem;
  }
  
  .sophisticated-markdown li {
    margin: 0.75rem 0;
    line-height: 1.7;
  }
  
  .sophisticated-markdown ul li {
    list-style: none;
    position: relative;
  }
  
  .sophisticated-markdown ul li::before {
    content: '•';
    color: #0066cc;
    font-weight: bold;
    position: absolute;
    left: -1.5rem;
    font-size: 1.2rem;
  }
  
  .sophisticated-markdown ol li {
    counter-increment: item;
  }
  
  .sophisticated-markdown ol {
    counter-reset: item;
  }
  
  .sophisticated-markdown ol li::marker {
    color: #0066cc;
    font-weight: 600;
  }
  
  /* Code blocks */
  .sophisticated-markdown pre {
    background: #f8fafc;
    border: 1px solid #e2e8f0;
    border-radius: 12px;
    padding: 1.5rem;
    margin: 2rem 0;
    overflow-x: auto;
    font-size: 0.9rem;
    line-height: 1.6;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  }
  
  .sophisticated-markdown code {
    background: #f1f5f9;
    color: #475569;
    padding: 0.25rem 0.5rem;
    border-radius: 6px;
    font-size: 0.9em;
    font-weight: 500;
    font-family: 'SF Mono', Monaco, Consolas, 'Liberation Mono', monospace;
    border: 1px solid #e2e8f0;
  }
  
  .sophisticated-markdown pre code {
    background: transparent;
    color: inherit;
    padding: 0;
    border: none;
    font-size: inherit;
  }
  
  /* Blockquotes */
  .sophisticated-markdown blockquote {
    margin: 2rem 0;
    padding: 1.5rem 2rem;
    background: linear-gradient(135deg, #f8fafc, #f1f5f9);
    border-left: 4px solid #0066cc;
    border-radius: 0 12px 12px 0;
    font-style: italic;
    color: #475569;
    position: relative;
  }
  
  .sophisticated-markdown blockquote::before {
    content: '"';
    position: absolute;
    top: -0.5rem;
    left: 1rem;
    font-size: 4rem;
    color: #cbd5e1;
    font-family: Georgia, serif;
  }
  
  .sophisticated-markdown blockquote p {
    margin: 0;
    font-size: 1.1rem;
    line-height: 1.6;
  }
  
  /* Tables */
  .sophisticated-markdown table {
    width: 100%;
    border-collapse: collapse;
    margin: 2rem 0;
    background: white;
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  }
  
  .sophisticated-markdown th,
  .sophisticated-markdown td {
    padding: 1rem 1.5rem;
    text-align: left;
    border-bottom: 1px solid #e5e7eb;
  }
  
  .sophisticated-markdown th {
    background: #f9fafb;
    font-weight: 600;
    color: #374151;
  }
  
  .sophisticated-markdown tr:hover {
    background: #f9fafb;
  }
  
  /* Images */
  .sophisticated-markdown img {
    max-width: 100%;
    height: auto;
    margin: 2rem auto;
    display: block;
    border-radius: 12px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
  }
  
  /* Horizontal rules */
  .sophisticated-markdown hr {
    border: none;
    height: 1px;
    background: linear-gradient(135deg, transparent, #e5e7eb, transparent);
    margin: 3rem 0;
  }
  
  /* Strong and emphasis */
  .sophisticated-markdown strong {
    font-weight: 700;
    color: #1f2937;
  }
  
  .sophisticated-markdown em {
    font-style: italic;
    color: #4b5563;
  }
  
  /* Responsive design */
  @media (max-width: 768px) {
    .sophisticated-markdown {
      font-size: 1rem;
      line-height: 1.7;
    }
    
    .sophisticated-markdown h1 {
      font-size: 1.875rem;
    }
    
    .sophisticated-markdown h2 {
      font-size: 1.5rem;
    }
    
    .sophisticated-markdown h3 {
      font-size: 1.25rem;
    }
    
    .sophisticated-markdown p:first-of-type {
      font-size: 1.125rem;
    }
    
    .sophisticated-markdown pre {
      padding: 1rem;
      font-size: 0.8rem;
    }
    
    .sophisticated-markdown blockquote {
      padding: 1rem 1.5rem;
      margin: 1.5rem 0;
    }
    
    .sophisticated-markdown th,
    .sophisticated-markdown td {
      padding: 0.75rem 1rem;
    }
  }
</style>