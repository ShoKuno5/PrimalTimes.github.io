---
import Layout from './Layout.astro';
import { calculateReadingTime } from '../utils/readingTime';

export interface Props {
  title: string;
  date?: Date;
  modified?: Date;
  tags?: string[];
  description?: string;
  showMeta?: boolean;
  showComments?: boolean;
  content?: string;
  mode?: 'homepage' | 'full';
  slug?: string;
}

const { title, date, modified, tags, description, showMeta = true, showComments = true, content, mode = 'full', slug } = Astro.props;

// Adaptive display based on mode
const isHomepageMode = mode === 'homepage';
const actualShowMeta = isHomepageMode ? showMeta : showMeta;
const actualShowComments = isHomepageMode ? false : showComments;

// Calculate reading time if content is provided
const readingTimeData = content ? calculateReadingTime(content) : null;
---

{isHomepageMode ? (
  <!-- Homepage mode: just the article -->
  <article style="max-width: 45rem; margin: 0 auto; padding: 3rem 1.5rem;">
    <!-- Elegant header with improved typography -->
    <header style="
      margin-bottom: 3rem;
      padding-bottom: 2rem;
      border-bottom: 1px solid rgba(0, 0, 0, 0.06);
    ">
      {isHomepageMode && slug ? (
        <h1 style="
          font-size: 2.5rem;
          font-weight: 800;
          line-height: 1.1;
          letter-spacing: -0.025em;
          margin-bottom: 1.5rem;
        ">
          <a href={`/posts/${slug}/`} style="
            background: linear-gradient(135deg, #1f2937, #4b5563, #0066cc);
            -webkit-background-clip: text;
            background-clip: text;
            color: transparent;
            -webkit-text-fill-color: transparent;
            text-decoration: none;
            transition: all 0.3s ease;
          ">
            {title}
          </a>
        </h1>
      ) : (
        <h1 style="
          font-size: 2.5rem;
          font-weight: 800;
          line-height: 1.1;
          letter-spacing: -0.025em;
          margin-bottom: 1.5rem;
          background: linear-gradient(135deg, #1f2937, #4b5563, #0066cc);
          -webkit-background-clip: text;
          background-clip: text;
          color: transparent;
          -webkit-text-fill-color: transparent;
        ">
          {title}
        </h1>
      )}
      
      <!-- Meta information -->
      {actualShowMeta && (
        <div style="
          display: flex;
          flex-wrap: wrap;
          align-items: center;
          gap: 1.5rem;
          margin-bottom: 2rem;
          font-size: 0.9rem;
          color: #6b7280;
        ">
          {date && (
            <time datetime={date.toISOString()} style="
              display: flex;
              align-items: center;
              gap: 0.5rem;
            ">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
                <line x1="16" y1="2" x2="16" y2="6"></line>
                <line x1="8" y1="2" x2="8" y2="6"></line>
                <line x1="3" y1="10" x2="21" y2="10"></line>
              </svg>
              {date.toLocaleDateString('en-US', { 
                year: 'numeric', 
                month: 'long', 
                day: 'numeric' 
              })}
            </time>
          )}
          
          {modified && (
            <span style="
              display: flex;
              align-items: center;
              gap: 0.5rem;
            ">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M12 20h9"></path>
                <path d="M16.5 3.5a2.121 2.121 0 0 1 3 3L7 19l-4 1 1-4L16.5 3.5z"></path>
              </svg>
              Updated {modified.toLocaleDateString('en-US', { 
                year: 'numeric', 
                month: 'long', 
                day: 'numeric' 
              })}
            </span>
          )}
          
          {readingTimeData && (
            <span style="
              display: flex;
              align-items: center;
              gap: 0.5rem;
            ">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <circle cx="12" cy="12" r="10"></circle>
                <polyline points="12,6 12,12 16,14"></polyline>
              </svg>
              {readingTimeData.readingTimeText}
            </span>
          )}
        </div>
      )}
      
      {tags && tags.length > 0 && (
        <div style="display: flex; flex-wrap: wrap; gap: 0.75rem;">
          {tags.map((tag) => (
            <a 
              href={`/posts/tags/#tag-${tag.toLowerCase().replace(/\s+/g, '-')}`}
              style="
                display: inline-flex;
                align-items: center;
                padding: 0.5rem 1rem;
                font-size: 0.8rem;
                font-weight: 500;
                background: linear-gradient(135deg, #f8fafc, #e2e8f0);
                color: #475569;
                border-radius: 2rem;
                text-decoration: none;
                transition: all 0.2s ease;
                border: 1px solid rgba(0, 0, 0, 0.05);
              "
              class="tag-link"
            >
              {tag}
            </a>
          ))}
        </div>
      )}
    </header>
    
    <!-- Enhanced markdown content with citation processing -->
    <div class="sophisticated-markdown citations-enabled">
      <slot />
    </div>
  </article>
) : (
  <!-- Full layout mode -->
  <Layout 
    title={title}
    description={description}
  >
    <article style="max-width: 45rem; margin: 0 auto; padding: 3rem 1.5rem;">
      <!-- Elegant header with improved typography -->
      <header style="
        margin-bottom: 3rem;
        padding-bottom: 2rem;
        border-bottom: 1px solid rgba(0, 0, 0, 0.06);
      ">
        <h1 style="
          font-size: 2.5rem;
          font-weight: 800;
          line-height: 1.1;
          letter-spacing: -0.025em;
          margin-bottom: 1.5rem;
          background: linear-gradient(135deg, #1f2937, #4b5563, #0066cc);
          -webkit-background-clip: text;
          background-clip: text;
          color: transparent;
          -webkit-text-fill-color: transparent;
        ">
          {title}
        </h1>
        
        <!-- Meta information -->
        {actualShowMeta && (
          <div style="
            display: flex;
            flex-wrap: wrap;
            align-items: center;
            gap: 1.5rem;
            margin-bottom: 2rem;
            font-size: 0.9rem;
            color: #6b7280;
          ">
            {date && (
              <time datetime={date.toISOString()} style="
                display: flex;
                align-items: center;
                gap: 0.5rem;
              ">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
                  <line x1="16" y1="2" x2="16" y2="6"></line>
                  <line x1="8" y1="2" x2="8" y2="6"></line>
                  <line x1="3" y1="10" x2="21" y2="10"></line>
                </svg>
                {date.toLocaleDateString('en-US', { 
                  year: 'numeric', 
                  month: 'long', 
                  day: 'numeric' 
                })}
              </time>
            )}
            
            {modified && (
              <span style="
                display: flex;
                align-items: center;
                gap: 0.5rem;
              ">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <path d="M12 20h9"></path>
                  <path d="M16.5 3.5a2.121 2.121 0 0 1 3 3L7 19l-4 1 1-4L16.5 3.5z"></path>
                </svg>
                Updated {modified.toLocaleDateString('en-US', { 
                  year: 'numeric', 
                  month: 'long', 
                  day: 'numeric' 
                })}
              </span>
            )}
            
            {readingTimeData && (
              <span style="
                display: flex;
                align-items: center;
                gap: 0.5rem;
              ">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <circle cx="12" cy="12" r="10"></circle>
                  <polyline points="12,6 12,12 16,14"></polyline>
                </svg>
                {readingTimeData.readingTimeText}
              </span>
            )}
          </div>
        )}
        
        {tags && tags.length > 0 && (
          <div style="display: flex; flex-wrap: wrap; gap: 0.75rem;">
            {tags.map((tag) => (
              <a 
                href={`/posts/tags/#tag-${tag.toLowerCase().replace(/\s+/g, '-')}`}
                style="
                  display: inline-flex;
                  align-items: center;
                  padding: 0.5rem 1rem;
                  font-size: 0.8rem;
                  font-weight: 500;
                  background: linear-gradient(135deg, #f8fafc, #e2e8f0);
                  color: #475569;
                  border-radius: 2rem;
                  text-decoration: none;
                  transition: all 0.2s ease;
                  border: 1px solid rgba(0, 0, 0, 0.05);
                "
                class="tag-link"
              >
                {tag}
              </a>
            ))}
          </div>
        )}
      </header>
      
      <!-- Enhanced markdown content with citation processing -->
      <div class="sophisticated-markdown citations-enabled">
        <slot />
      </div>
    </article>
  </Layout>
)}

<!-- Progress bar script (preserved from original) -->
{!isHomepageMode && (
<script is:inline>
(function() {
  let ticking = false;
  
  function updateSilentProgress() {
    const winScroll = window.pageYOffset || document.documentElement.scrollTop;
    const height = document.documentElement.scrollHeight - document.documentElement.clientHeight;
    const scrolled = (winScroll / height) * 100;
    
    const progressBar = document.querySelector('.progress-bar');
    if (progressBar) {
      progressBar.style.width = scrolled + '%';
    }
  }
  
  function handleScroll() {
    if (!ticking) {
      requestAnimationFrame(function() {
        updateSilentProgress();
        ticking = false;
      });
      ticking = true;
    }
  }
  
  function handleTouch() {
    setTimeout(updateSilentProgress, 50);
  }
  
  function init() {
    updateSilentProgress();
    window.addEventListener('scroll', handleScroll, { passive: true });
    window.addEventListener('touchmove', handleTouch, { passive: true });
    window.addEventListener('touchend', handleTouch, { passive: true });
    window.addEventListener('resize', function() {
      setTimeout(updateSilentProgress, 100);
    }, { passive: true });
  }
  
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', init);
  } else {
    init();
  }
})();
</script>
)}

<!-- Sophisticated Typography Styles -->
<style is:global>
  /* Tag hover effects */
  .tag-link:hover {
    background: linear-gradient(135deg, #e2e8f0, #cbd5e1) !important;
    transform: translateY(-1px) !important;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1) !important;
    color: #334155 !important;
  }
  
  /* Sophisticated Markdown Typography */
  .sophisticated-markdown {
    font-family: 'Charter', 'Droid Serif', 'Times New Roman', serif;
    font-size: 1.125rem;
    line-height: 1.8;
    color: #1f2937;
    max-width: none;
    margin: 0;
    letter-spacing: 0.01em;
    text-rendering: optimizeLegibility;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  }
  
  /* Headers with elegant hierarchy */
  .sophisticated-markdown h1,
  .sophisticated-markdown h2,
  .sophisticated-markdown h3,
  .sophisticated-markdown h4,
  .sophisticated-markdown h5,
  .sophisticated-markdown h6 {
    font-family: 'Inter', 'Segoe UI', 'Roboto', sans-serif;
    font-weight: 700;
    color: #0f172a;
    margin-top: 2.5rem;
    margin-bottom: 1rem;
    line-height: 1.3;
    letter-spacing: -0.025em;
  }
  
  .sophisticated-markdown h1 {
    font-size: 2.5rem;
    font-weight: 800;
    margin-bottom: 1.5rem;
    color: #1e293b;
  }
  
  .sophisticated-markdown h2 {
    font-size: 2rem;
    font-weight: 700;
    margin-top: 3rem;
    margin-bottom: 1.25rem;
    color: #334155;
    border-bottom: 2px solid #e2e8f0;
    padding-bottom: 0.5rem;
  }
  
  .sophisticated-markdown h3 {
    font-size: 1.5rem;
    font-weight: 600;
    margin-top: 2.5rem;
    margin-bottom: 1rem;
    color: #475569;
  }
  
  .sophisticated-markdown h4,
  .sophisticated-markdown h5,
  .sophisticated-markdown h6 {
    font-size: 1.25rem;
    font-weight: 600;
    margin-top: 2rem;
    margin-bottom: 0.75rem;
    color: #64748b;
  }
  
  /* Paragraphs and text */
  .sophisticated-markdown p {
    margin: 1.5rem 0;
    text-align: justify;
    hyphens: auto;
    -webkit-hyphens: auto;
    -moz-hyphens: auto;
  }
  
  .sophisticated-markdown p:first-of-type {
    font-size: 1.2rem;
    line-height: 1.7;
    color: #1f2937;
    font-weight: 400;
  }
  
  /* Links */
  .sophisticated-markdown a {
    color: #0066cc;
    text-decoration: none;
    font-weight: 500;
    border-bottom: 1px solid transparent;
    transition: all 0.2s ease;
    position: relative;
  }
  
  .sophisticated-markdown a:hover {
    color: #0052a3;
    border-bottom-color: #0066cc;
  }
  
  /* Lists */
  .sophisticated-markdown ul,
  .sophisticated-markdown ol {
    margin: 1.5rem 0;
    padding-left: 2rem;
  }
  
  .sophisticated-markdown li {
    margin: 0.75rem 0;
    line-height: 1.7;
  }
  
  /* Code blocks */
  .sophisticated-markdown pre {
    background: #f8fafc;
    border: 1px solid #e2e8f0;
    border-radius: 12px;
    padding: 1.5rem;
    margin: 2rem 0;
    overflow-x: auto;
    font-size: 0.9rem;
    line-height: 1.6;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  }
  
  .sophisticated-markdown code {
    background: #f1f5f9;
    color: #475569;
    padding: 0.25rem 0.5rem;
    border-radius: 6px;
    font-size: 0.9em;
    font-weight: 500;
    font-family: 'SF Mono', Monaco, Consolas, 'Liberation Mono', monospace;
    border: 1px solid #e2e8f0;
  }
  
  .sophisticated-markdown pre code {
    background: transparent;
    color: inherit;
    padding: 0;
    border: none;
    font-size: inherit;
  }
  
  /* Blockquotes */
  .sophisticated-markdown blockquote {
    margin: 2rem 0;
    padding: 1.5rem 2rem;
    background: linear-gradient(135deg, #f8fafc, #f1f5f9);
    border-left: 4px solid #0066cc;
    border-radius: 0 12px 12px 0;
    font-style: italic;
    color: #475569;
    position: relative;
  }
  
  .sophisticated-markdown blockquote::before {
    content: '"';
    position: absolute;
    top: -0.5rem;
    left: 1rem;
    font-size: 4rem;
    color: #cbd5e1;
    font-family: Georgia, serif;
  }
  
  .sophisticated-markdown blockquote p {
    margin: 0;
    font-size: 1.1rem;
    line-height: 1.6;
  }
  
  /* Tables */
  .sophisticated-markdown table {
    width: 100%;
    border-collapse: collapse;
    margin: 2rem 0;
    background: white;
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  }
  
  .sophisticated-markdown th,
  .sophisticated-markdown td {
    padding: 1rem 1.5rem;
    text-align: left;
    border-bottom: 1px solid #e5e7eb;
  }
  
  .sophisticated-markdown th {
    background: #f9fafb;
    font-weight: 600;
    color: #374151;
  }
  
  .sophisticated-markdown tr:hover {
    background: #f9fafb;
  }
  
  /* Images */
  .sophisticated-markdown img {
    max-width: 100%;
    height: auto;
    margin: 2rem auto;
    display: block;
    border-radius: 12px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
  }
  
  /* Horizontal rules */
  .sophisticated-markdown hr {
    border: none;
    height: 1px;
    background: linear-gradient(135deg, transparent, #e5e7eb, transparent);
    margin: 3rem 0;
  }
  
  /* Strong and emphasis */
  .sophisticated-markdown strong {
    font-weight: 700;
    color: #1f2937;
  }
  
  .sophisticated-markdown em {
    font-style: italic;
    color: #4b5563;
  }
  
  /* Responsive design */
  @media (max-width: 768px) {
    .sophisticated-markdown {
      font-size: 1rem;
      line-height: 1.7;
    }
    
    .sophisticated-markdown h1 {
      font-size: 1.875rem;
    }
    
    .sophisticated-markdown h2 {
      font-size: 1.5rem;
    }
    
    .sophisticated-markdown h3 {
      font-size: 1.25rem;
    }
    
    .sophisticated-markdown p:first-of-type {
      font-size: 1.125rem;
    }
    
    .sophisticated-markdown pre {
      padding: 1rem;
      font-size: 0.8rem;
    }
    
    .sophisticated-markdown blockquote {
      padding: 1rem 1.5rem;
      margin: 1.5rem 0;
    }
    
    .sophisticated-markdown th,
    .sophisticated-markdown td {
      padding: 0.75rem 1rem;
    }
  }
</style>
